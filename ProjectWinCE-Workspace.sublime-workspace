{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"in",
				"int"
			],
			[
				"CreateWindo",
				"CreateWindowEx\tabc"
			],
			[
				"Crea",
				"CreateWindow\tabc"
			],
			[
				"Dest",
				"DestroyWindow"
			],
			[
				"Create",
				"CreateWindow"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"stdafx.h\"\n#include \"DebugFunctions.h\"\n\nvoid StringSizeTest(HWND hWnd)\n{\n\tSIZE results;\n\tTEXTMETRIC test;\n\t\n\twchar_t bufferA[512]=TEXT(\"Some kind  q|{} of telkglosdf;ljas;ldfdiuagsdgajsghdkixt\");\n\tint length = wcslen(bufferA);\n\t\n\t__int64 start = Milliseconds_now();\n\tHDC hdc;\n\thdc = GetDC(hWnd);\n\tGetTextMetrics(hdc, &test ); \n\tfor (int i=0; i<100000; i++)\n\t{\n\t\t\n\t\tGetTextExtentPoint32(hdc, bufferA, length,&results);\n\t\t\n\t}\n\tReleaseDC(hWnd,hdc);\n\t__int64 stop = Milliseconds_now();\n\t__int64 timer=stop-start;\n\t\n\tunsigned short  buffer[200];\n\t\n\tint len=swprintf( buffer,L\"Test 100,000 Text length getting, Total:%d ms\", timer);\n\t\n\tMessageBox(NULL, buffer, TEXT(\"Results\"), MB_OK);\n\treturn;\n}\n\nvoid MemOperationsTest()\n{\n\twchar_t bufferA[512]=TEXT(\"Some kind of text\");\n\tint textLength=wcslen(bufferA)*sizeof(wchar_t);\n\tint currPos=4;\n\t__int64 start = Milliseconds_now();\n\tfor (long i=0; i<1000000; i++)\n\t{\n\t\tmemmove(&bufferA[currPos+1],&bufferA[currPos], textLength-currPos);\n\t\tbufferA[currPos]=L'd';\n\t\tmemmove(&bufferA[currPos],&bufferA[currPos+1], textLength-currPos);\n\t}\n\n\t__int64 stop = Milliseconds_now();\n\n\t__int64 timer=stop-start;\n\t\n\tunsigned short  buffer[200];\n\t\n\tint len=swprintf( buffer,L\"Test 1,000,000 memory shifts (1 pos) and delete char, Total:%d ms\", timer);\n\t\n\tMessageBox(NULL, buffer, TEXT(\"Results\"), MB_OK);\n}\n\nvoid SpeedTest(HWND hWnd, int lineScrolls, SEGMENT* segments, int segmentsCount)\n{\n\n\tSCROLLINFO si;\n\t\n\t// Get scroll bar position.\n\tsi.cbSize = sizeof (si);\n\tsi.fMask = SIF_POS | SIF_PAGE | SIF_RANGE;\n\t\n\tint ans=GetScrollInfo (hWnd, SB_CTL, &si);\n\tRECT rect;\n\t\n\tGetClientRect(hWnd, &rect);\n\trect.right-=SBWIDTH;\n\trect.top=TOPHEADERDEADZONE;\n\t__int64 stop=0;\n\t__int64 start=0;\n\t__int64 part2=0;\n\t__int64 part3=0;\n\t__int64 drawTime=0;\n\t__int64 updateTime=0;\n\t\n\tHDC hdc;\n\t\n\tstart= Milliseconds_now();\n\t\n\tint a=lineScrolls;\n\tint b=0;\n\tint c=0;;\n\tfor (int j=0; j<5; j++)\n\t{\n\t\tpart2=Milliseconds_now();\n\t\tfor (int jj=0; jj<50; jj++)\n\t\t{\n\t\t\thdc = GetDC(hWnd);\n\t\t\tGetClientRect(hWnd, &rect);\n\t\t\trect.top=TOPHEADERDEADZONE;\n\t\t\tDrawTextByLineChoosenHDC(segments, segmentsCount, a, b , 0, 13,hdc, rect);\n\t\t\tReleaseDC(hWnd,hdc);\n\t\t\t\n\t\t\tc=a;\n\t\t\ta=b;\n\t\t\tb=c;\n\t\t}\n\t\tpart3=Milliseconds_now();\n\t\tupdateTime+=part3-part2;\n\t}\n\t\n\tstop=Milliseconds_now();\n\t__int64 timer=stop-start;\n\t\n\tunsigned short  buffer[200];\n\t\n\tint len=swprintf( buffer,L\"Test 250 redraws, Total:%dms Update%dms \", timer, updateTime);\n\tlen+=swprintf( buffer+len,L\"Update rectangle: top:%dpx left:%dpx right:%dpx bottom:%dpx FPS: %f\", rect.top, rect.left, rect.right, rect.bottom, (float)250/(float(timer)/1000.0));\n\t\n\tMessageBox(NULL, buffer, TEXT(\"Results\"), MB_OK);\t\n}\n\n__int64 Milliseconds_now(){\n    static _LARGE_INTEGER s_frequency;\n    static BOOL s_use_qpc = QueryPerformanceFrequency(&s_frequency);\n    if (s_use_qpc) {\n        _LARGE_INTEGER now;\n\t\t\n        QueryPerformanceCounter(&now);\n        return (1000L * now.QuadPart) / s_frequency.QuadPart;\n    } else {\n        return GetTickCount();\n    }\n}",
			"file": "DebugFunctions.cpp",
			"file_size": 3132,
			"file_write_time": 132693517315112095,
			"settings":
			{
				"buffer_size": 3005,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC9CwAAI2luY2x1ZGUgInN0ZGFmeC5oIgojaW5jbHVkZSAiRGVidWdGdW5jdGlvbnMuaCIKCnZvaWQgU3RyaW5nU2l6ZVRlc3QoSFdORCBoV25kKQp7CglTSVpFIHJlc3VsdHM7CglURVhUTUVUUklDIHRlc3Q7CgkKCXdjaGFyX3QgYnVmZmVyQVs1MTJdPVRFWFQoIlNvbWUga2luZCAgcXx7fSBvZiB0ZWxrZ2xvc2RmO2xqYXM7bGRmZGl1YWdzZGdhanNnaGRraXh0Iik7CglpbnQgbGVuZ3RoID0gd2NzbGVuKGJ1ZmZlckEpOwoJCglfX2ludDY0IHN0YXJ0ID0gTWlsbGlzZWNvbmRzX25vdygpOwoJSERDIGhkYzsKCWhkYyA9IEdldERDKGhXbmQpOwoJR2V0VGV4dE1ldHJpY3MoaGRjLCAmdGVzdCApOyAKCWZvciAoaW50IGk9MDsgaTwxMDAwMDA7IGkrKykKCXsKCQkKCQlHZXRUZXh0RXh0ZW50UG9pbnQzMihoZGMsIGJ1ZmZlckEsIGxlbmd0aCwmcmVzdWx0cyk7CgkJCgl9CglSZWxlYXNlREMoaFduZCxoZGMpOwoJX19pbnQ2NCBzdG9wID0gTWlsbGlzZWNvbmRzX25vdygpOwoJX19pbnQ2NCB0aW1lcj1zdG9wLXN0YXJ0OwoJCgl1bnNpZ25lZCBzaG9ydCAgYnVmZmVyWzIwMF07CgkKCWludCBsZW49c3dwcmludGYoIGJ1ZmZlcixMIlRlc3QgMTAwLDAwMCBUZXh0IGxlbmd0aCBnZXR0aW5nLCBUb3RhbDolZCBtcyIsIHRpbWVyKTsKCQoJTWVzc2FnZUJveChOVUxMLCBidWZmZXIsIFRFWFQoIlJlc3VsdHMiKSwgTUJfT0spOwoJcmV0dXJuOwp9Cgp2b2lkIE1lbU9wZXJhdGlvbnNUZXN0KCkKewoJd2NoYXJfdCBidWZmZXJBWzUxMl09VEVYVCgiU29tZSBraW5kIG9mIHRleHQiKTsKCWludCB0ZXh0TGVuZ3RoPXdjc2xlbihidWZmZXJBKSpzaXplb2Yod2NoYXJfdCk7CglpbnQgY3VyclBvcz00OwoJX19pbnQ2NCBzdGFydCA9IE1pbGxpc2Vjb25kc19ub3coKTsKCWZvciAobG9uZyBpPTA7IGk8MTAwMDAwMDsgaSsrKQoJewoJCW1lbW1vdmUoJmJ1ZmZlckFbY3VyclBvcysxXSwmYnVmZmVyQVtjdXJyUG9zXSwgdGV4dExlbmd0aC1jdXJyUG9zKTsKCQlidWZmZXJBW2N1cnJQb3NdPUwnZCc7CgkJbWVtbW92ZSgmYnVmZmVyQVtjdXJyUG9zXSwmYnVmZmVyQVtjdXJyUG9zKzFdLCB0ZXh0TGVuZ3RoLWN1cnJQb3MpOwoJfQoKCV9faW50NjQgc3RvcCA9IE1pbGxpc2Vjb25kc19ub3coKTsKCglfX2ludDY0IHRpbWVyPXN0b3Atc3RhcnQ7CgkKCXVuc2lnbmVkIHNob3J0ICBidWZmZXJbMjAwXTsKCQoJaW50IGxlbj1zd3ByaW50ZiggYnVmZmVyLEwiVGVzdCAxLDAwMCwwMDAgbWVtb3J5IHNoaWZ0cyAoMSBwb3MpIGFuZCBkZWxldGUgY2hhciwgVG90YWw6JWQgbXMiLCB0aW1lcik7CgkKCU1lc3NhZ2VCb3goTlVMTCwgYnVmZmVyLCBURVhUKCJSZXN1bHRzIiksIE1CX09LKTsKfQoKdm9pZCBTcGVlZFRlc3QoSFdORCBoV25kLCBpbnQgbGluZVNjcm9sbHMsIFNFR01FTlQqIHNlZ21lbnRzLCBpbnQgc2VnbWVudHNDb3VudCkKewoKCVNDUk9MTElORk8gc2k7CgkKCS8vIEdldCBzY3JvbGwgYmFyIHBvc2l0aW9uLgoJc2kuY2JTaXplID0gc2l6ZW9mIChzaSk7CglzaS5mTWFzayA9IFNJRl9QT1MgfCBTSUZfUEFHRSB8IFNJRl9SQU5HRTsKCQoJaW50IGFucz1HZXRTY3JvbGxJbmZvIChoV25kLCBTQl9DVEwsICZzaSk7CglSRUNUIHJlY3Q7CgkKCUdldENsaWVudFJlY3QoaFduZCwgJnJlY3QpOwoJcmVjdC5yaWdodC09U0JXSURUSDsKCXJlY3QudG9wPVRPUEhFQURFUkRFQURaT05FOwoJX19pbnQ2NCBzdG9wPTA7CglfX2ludDY0IHN0YXJ0PTA7CglfX2ludDY0IHBhcnQyPTA7CglfX2ludDY0IHBhcnQzPTA7CglfX2ludDY0IGRyYXdUaW1lPTA7CglfX2ludDY0IHVwZGF0ZVRpbWU9MDsKCQoJSERDIGhkYzsKCQoJc3RhcnQ9IE1pbGxpc2Vjb25kc19ub3coKTsKCQoJaW50IGE9bGluZVNjcm9sbHM7CglpbnQgYj0wOwoJaW50IGM9MDs7Cglmb3IgKGludCBqPTA7IGo8NTsgaisrKQoJewoJCXBhcnQyPU1pbGxpc2Vjb25kc19ub3coKTsKCQlmb3IgKGludCBqaj0wOyBqajw1MDsgamorKykKCQl7CgkJCWhkYyA9IEdldERDKGhXbmQpOwoJCQlHZXRDbGllbnRSZWN0KGhXbmQsICZyZWN0KTsKCQkJcmVjdC50b3A9VE9QSEVBREVSREVBRFpPTkU7CgkJCURyYXdUZXh0QnlMaW5lQ2hvb3NlbkhEQyhzZWdtZW50cywgc2VnbWVudHNDb3VudCwgYSwgYiAsIDAsIDEzLGhkYywgcmVjdCk7CgkJCVJlbGVhc2VEQyhoV25kLGhkYyk7CgkJCQoJCQljPWE7CgkJCWE9YjsKCQkJYj1jOwoJCX0KCQlwYXJ0Mz1NaWxsaXNlY29uZHNfbm93KCk7CgkJdXBkYXRlVGltZSs9cGFydDMtcGFydDI7Cgl9CgkKCXN0b3A9TWlsbGlzZWNvbmRzX25vdygpOwoJX19pbnQ2NCB0aW1lcj1zdG9wLXN0YXJ0OwoJCgl1bnNpZ25lZCBzaG9ydCAgYnVmZmVyWzIwMF07CgkKCWludCBsZW49c3dwcmludGYoIGJ1ZmZlcixMIlRlc3QgMjUwIHJlZHJhd3MsIFRvdGFsOiVkbXMgVXBkYXRlJWRtcyAiLCB0aW1lciwgdXBkYXRlVGltZSk7CglsZW4rPXN3cHJpbnRmKCBidWZmZXIrbGVuLEwiVXBkYXRlIHJlY3RhbmdsZTogdG9wOiVkcHggbGVmdDolZHB4IHJpZ2h0OiVkcHggYm90dG9tOiVkcHggRlBTOiAlZiIsIHJlY3QudG9wLCByZWN0LmxlZnQsIHJlY3QucmlnaHQsIHJlY3QuYm90dG9tLCAoZmxvYXQpMjUwLyhmbG9hdCh0aW1lcikvMTAwMC4wKSk7CgkKCU1lc3NhZ2VCb3goTlVMTCwgYnVmZmVyLCBURVhUKCJSZXN1bHRzIiksIE1CX09LKTsJCn0KCl9faW50NjQgTWlsbGlzZWNvbmRzX25vdygpewogICAgc3RhdGljIF9MQVJHRV9JTlRFR0VSIHNfZnJlcXVlbmN5OwogICAgc3RhdGljIEJPT0wgc191c2VfcXBjID0gUXVlcnlQZXJmb3JtYW5jZUZyZXF1ZW5jeSgmc19mcmVxdWVuY3kpOwogICAgaWYgKHNfdXNlX3FwYykgewogICAgICAgIF9MQVJHRV9JTlRFR0VSIG5vdzsKCQkKICAgICAgICBRdWVyeVBlcmZvcm1hbmNlQ291bnRlcigmbm93KTsKICAgICAgICByZXR1cm4gKDEwMDBMICogbm93LlF1YWRQYXJ0KSAvIHNfZnJlcXVlbmN5LlF1YWRQYXJ0OwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gR2V0VGlja0NvdW50KCk7CiAgICB9Cn0AAAAAAAAAALwLAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMUBAAAAAAAAxgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFAQAAAAAAAMUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAMUBAAAAAAAAxQEAAAAAAAABAAAAOw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGAQAAAAAAAMYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMUBAAAAAAAAxgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFAQAAAAAAAMUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABIBAAAAAAAAEwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAABIBAAAAAAAAEgEAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwEAAAAAAAATAQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAABEBAAAAAAAAEQEAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABEBAAAAAAAAEgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAAE0BAAAAAAAATQEAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE0BAAAAAAAATgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAHBA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAG0BAAAAAAAAbgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0BAAAAAAAAbQEAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAG0BAAAAAAAAbQEAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4BAAAAAAAAbgEAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\nЬуыы"
					},
					"BgAAAGUKAAAAAAAAZgoAAAAAAAAAAAAAZgoAAAAAAABnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAAaQoAAAAAAABqCgAAAAAAAAAAAABqCgAAAAAAAGsKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlCgAAAAAAAGUKAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					4,
					"left_delete",
					null,
					"BAAAAGoKAAAAAAAAagoAAAAAAAACAAAA0YtpCgAAAAAAAGkKAAAAAAAAAgAAANGLaAoAAAAAAABoCgAAAAAAAAIAAADRg2cKAAAAAAAAZwoAAAAAAAACAAAA0Kw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrCgAAAAAAAGsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "Mess"
					},
					"BAAAAGcKAAAAAAAAaAoAAAAAAAAAAAAAaAoAAAAAAABpCgAAAAAAAAAAAABpCgAAAAAAAGoKAAAAAAAAAAAAAGoKAAAAAAAAawoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCgAAAAAAAGcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "MessageBox",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "MessageBox"
					},
					"AgAAAGcKAAAAAAAAZwoAAAAAAAAEAAAATWVzc2cKAAAAAAAAcQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrCgAAAAAAAGsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHEKAAAAAAAAcwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCgAAAAAAAHEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHMKAAAAAAAAdAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCgAAAAAAAHMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHIKAAAAAAAAcwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAHIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAHIKAAAAAAAAcgoAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCgAAAAAAAHMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAHQKAAAAAAAAdQoAAAAAAAAAAAAAdQoAAAAAAAB2CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAHIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAHUKAAAAAAAAdQoAAAAAAAABAAAACXQKAAAAAAAAdAoAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2CgAAAAAAAHYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAAHIKAAAAAAAAcwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAHIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "NULL",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "NULL"
					},
					"AgAAAHIKAAAAAAAAcgoAAAAAAAABAAAATnIKAAAAAAAAdgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCgAAAAAAAHMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHYKAAAAAAAAdwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2CgAAAAAAAHYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcKAAAAAAAAeAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CgAAAAAAAHcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					6,
					"left_delete",
					null,
					"BgAAAHcKAAAAAAAAdwoAAAAAAAABAAAAIHYKAAAAAAAAdgoAAAAAAAABAAAALHUKAAAAAAAAdQoAAAAAAAABAAAATHQKAAAAAAAAdAoAAAAAAAABAAAATHMKAAAAAAAAcwoAAAAAAAABAAAAVXIKAAAAAAAAcgoAAAAAAAABAAAATg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CgAAAAAAAHgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHEKAAAAAAAAcQoAAAAAAAABAAAAKHEKAAAAAAAAcQoAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAHIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAGYKAAAAAAAAZgoAAAAAAAAMAAAACU1lc3NhZ2VCb3g7ZQoAAAAAAABlCgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAGYKAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "ProjectWinCE.cpp",
			"settings":
			{
				"buffer_size": 10516,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAAwLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAAOCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAsAAAAAAAAMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAA4LAAAAAAAADwsAAAAAAAAAAAAADwsAAAAAAAASCwAAAAAAAAAAAAASCwAAAAAAABMLAAAAAAAAAAAAABMLAAAAAAAAFgsAAAAAAAAAAAAADwsAAAAAAAAPCwAAAAAAAAMAAAAJICA",
					"AQAAAAAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAgEhA"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAA8LAAAAAAAArw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAgEhA"
				],
				[
					25,
					1,
					"paste",
					null,
					"AgAAALQNAAAAAAAAgRAAAAAAAAAAAAAAgRAAAAAAAACBEAAAAAAAABwAAAAJSFdORCBDcmVhdGVUb29sYmFyRXgoCgoKCQkp",
					"AQAAAAAAAAABAAAA0A0AAAAAAAC0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAA8LAAAAAAAAEAsAAAAAAAAAAAAAsQ0AAAAAAACxDQAAAAAAAAMAAAAJICA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAA8LAAAAAAAADwsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAEAsAAAAAAAAQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAA8LAAAAAAAAEAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACgLAAAAAAAAKQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAsAAAAAAAAoCwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQsAAAAAAAAtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAG0LAAAAAAAAbgsAAAAAAAAAAAAAbgsAAAAAAABvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAK0LAAAAAAAArgsAAAAAAAAAAAAArgsAAAAAAACvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQsAAAAAAACtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAO0LAAAAAAAA7gsAAAAAAAAAAAAA7gsAAAAAAADvCwAAAAAAAAAAAADvCwAAAAAAAPALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QsAAAAAAADtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAO8LAAAAAAAA7wsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA8AsAAAAAAADwCwAAAAAAAAAAAAAAwFhA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAB8MAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAhDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwwAAAAAAAAfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGAMAAAAAAAAYQwAAAAAAAAAAAAAYQwAAAAAAABiDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAwAAAAAAABgDAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAKEMAAAAAAAAogwAAAAAAAAAAAAAogwAAAAAAACjDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQwAAAAAAAChDAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOIMAAAAAAAA4wwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gwAAAAAAADiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOMMAAAAAAAA5AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wwAAAAAAADjDAAAAAAAAAAAAAAAgEBA"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAABQNAAAAAAAAFQ0AAAAAAAAAAAAAFQ0AAAAAAAAWDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA0AAAAAAAAUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAFUNAAAAAAAAVg0AAAAAAAAAAAAAVg0AAAAAAABXDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQ0AAAAAAABVDQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAIcNAAAAAAAAiA0AAAAAAAAAAAAAiA0AAAAAAACJDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhw0AAAAAAACHDQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAMUNAAAAAAAAxg0AAAAAAAAAAAAAxg0AAAAAAADHDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQ0AAAAAAADFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAMYNAAAAAAAAxg0AAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAxw0AAAAAAADHDQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"paste",
					null,
					"AgAAAMoNAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAkEAAAAAAAABAEAABIV05EIENyZWF0ZVRvb2xiYXJFeCgKICBIV05EICBod25kLCAgICAgICAgIC8vINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INC+0LrQvdCwCiAgRFdPUkQgIHdzLCAgICAgICAgICAvLyDRgdGC0LjQu9C4INC+0LrQvdCwIFRvb2xiYXIgCiAgVUlOVCAgd0lELCAgICAgICAgICAvLyDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQvtGA0LPQsNC90LAgVG9vbGJhciAKICBpbnQgIG5CaXRtYXBzLC8vINC60L7Qu9C40YfQtdGB0YLQstC+INC/0LjQutGC0L7Qs9GA0LDQvNC8INGBINC40LfQvtCx0YDQsNC20LXQvdC40LXQvCDQutC90L7Qv9C+0LoKICBISU5TVEFOQ0UgIGhCTUluc3QsIC8vINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0YDQuNC70L7QttC10L3QuNGPCiAgVUlOVCAgd0JNSUQsICAvLyDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQsdC40YLQvtCy0L7Qs9C+INC40LfQvtCx0YDQsNC20LXQvdC40Y8g0LrQvdC+0L/QvtC6CiAgTFBDVEJCVVRUT04gIGxwQnV0dG9ucywgLy8g0LDQtNGA0LXRgSDQvtC/0LjRgdCw0L3QuNGPINC60L3QvtC/0L7QugogIGludCAgaU51bUJ1dHRvbnMsICAgLy8g0LrQvtC70LjRh9C10YHRgtCy0L4g0LrQvdC+0L/QvtC6CiAgaW50ICBkeEJ1dHRvbiwgICAgICAvLyDRiNC40YDQuNC90LAg0LrQvdC+0L/QvtC6ICjQsiDQv9C40LrRgdC10LvQsNGFKQogIGludCAgZHlCdXR0b24sICAgICAgLy8g0LLRi9GB0L7RgtCwINC60L3QvtC/0L7QugogIGludCAgZHhCaXRtYXAsLy8g0YjQuNGA0LjQvdCwINC/0LjQutGC0L7Qs9GA0LDQvNC8LCDQvdCw0YDQuNGB0L7QstCw0L3QvdGL0YUg0L3QsCDQutC90L7Qv9C60LDRhQkKICBpbnQgIGR5Qml0bWFwLC8vINCy0YvRgdC+0YLQsCDQv9C40LrRgtC+0LPRgNCw0LzQvCwg0L3QsNGA0LjRgdC+0LLQsNC90L3Ri9GFINC90LAg0LrQvdC+0L/QutCw0YUKICBVSU5UIHVTdHJ1Y3RTaXplICAgIC8vINGA0LDQt9C80LXRgCDRgdGC0YDRg9C60YLRg9GA0Ysg0LIg0LHQsNC50YLQsNGFCik7Cg",
					"AQAAAAAAAAABAAAAmBAAAAAAAADKDQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACQQAAAAAAAAJRAAAAAAAAAAAAAAJRAAAAAAAAApEAAAAAAAAAAAAAAlEAAAAAAAACUQAAAAAAAABAAAACAgICAlEAAAAAAAACUQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBAAAAAAAAAkEAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMoNAAAAAAAAyw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyg0AAAAAAADKDQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAO4NAAAAAAAA7w0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7g0AAAAAAADuDQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADEOAAAAAAAAMg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQ4AAAAAAAAxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEcOAAAAAAAASA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARw4AAAAAAABHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIIOAAAAAAAAgw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgg4AAAAAAACCDgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALUOAAAAAAAAtg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOsOAAAAAAAA7A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6w4AAAAAAADrDgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACsPAAAAAAAALA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKw8AAAAAAAArDwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGIPAAAAAAAAYw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYg8AAAAAAABiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJEPAAAAAAAAkg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ8AAAAAAACRDwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMUPAAAAAAAAxg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQ8AAAAAAADFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAP0PAAAAAAAA/g8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/Q8AAAAAAAD9DwAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/g8AAAAAAAD+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"paste",
					null,
					"AQAAABQPAAAAAAAANxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA8AAAAAAAAUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABQPAAAAAAAAFQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA8AAAAAAAAUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAACoPAAAAAAAAKw8AAAAAAAAAAAAAKw8AAAAAAAAsDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKg8AAAAAAAAqDwAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADsPAAAAAAAAPA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOw8AAAAAAAA7DwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGgPAAAAAAAAaQ8AAAAAAAAAAAAAaQ8AAAAAAABqDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaA8AAAAAAABoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIoPAAAAAAAAiw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAig8AAAAAAACKDwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJ8PAAAAAAAAoA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnw8AAAAAAACfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALsPAAAAAAAAvA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuw8AAAAAAAC7DwAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPoPAAAAAAAA+w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+g8AAAAAAAD6DwAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAC0QAAAAAAAALhAAAAAAAAAAAAAALhAAAAAAAAAvEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRAAAAAAAAAtEAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALxAAAAAAAAAvEAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMkNAAAAAAAAyg0AAAAAAAAAAAAAyg0AAAAAAADLDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQ0AAAAAAADJDQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"paste",
					null,
					"AQAAAMsNAAAAAAAA3A0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyw0AAAAAAADLDQAAAAAAAAAAAAAAAAAA"
				],
				[
					173,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA3A0AAAAAAADcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA3A0AAAAAAADcDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter-cppcheck\n----------------------\n\n  SublimeLinter-cppcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cppcheck.\n\n  Please read the installation instructions at:\n\n  https://github.com/SublimeLinter/SublimeLinter-cppcheck",
			"settings":
			{
				"buffer_size": 338,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "Package Control Messages\n========================\n\nSublimeLinter-cppcheck\n----------------------\n\n  SublimeLinter-cppcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cppcheck.\n\n  Please read the installation instructions at:\n\n  https://github.com/SublimeLinter/SublimeLinter-cppcheck"
					},
					"FQAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAAEkAAAAAAAAAAAAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAABcBAAAAAAAAAAAAABcBAAAAAAAAGAEAAAAAAAAAAAAAGAEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAAFIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "DebugFunctions.h",
			"settings":
			{
				"buffer_size": 313,
				"line_ending": "Windows"
			}
		},
		{
			"file": "GraphicsFunctions.cpp",
			"redo_stack":
			[
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAALYBAAAAAAAAtwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2AQAAAAAAALYBAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 5415,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\nin"
					},
					"BAAAALcBAAAAAAAAuAEAAAAAAAAAAAAAuAEAAAAAAAC5AQAAAAAAAAAAAAC5AQAAAAAAALoBAAAAAAAAAAAAALoBAAAAAAAAuwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3AQAAAAAAALcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_completion",
					{
						"completion": "int",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "int"
					},
					"AgAAALkBAAAAAAAAuQEAAAAAAAACAAAAaW65AQAAAAAAALwBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AQAAAAAAALsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALwBAAAAAAAAvQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AQAAAAAAALwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					6,
					"left_delete",
					null,
					"BgAAALwBAAAAAAAAvAEAAAAAAAABAAAAILsBAAAAAAAAuwEAAAAAAAABAAAAdLoBAAAAAAAAugEAAAAAAAABAAAAbrkBAAAAAAAAuQEAAAAAAAABAAAAabgBAAAAAAAAuAEAAAAAAAABAAAACbcBAAAAAAAAtwEAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAugEAAAAAAAC6AQAAAAAAAAEAAAAJ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AQAAAAAAALkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "Get"
					},
					"BAAAALoBAAAAAAAAuwEAAAAAAAAAAAAAvAEAAAAAAAC8AQAAAAAAAAEAAAAJuwEAAAAAAAC8AQAAAAAAAAAAAAC8AQAAAAAAAL0BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6AQAAAAAAALoBAAAAAAAAAAAAAACAQEA"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "GetFocus",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "GetFocus"
					},
					"AgAAALoBAAAAAAAAugEAAAAAAAADAAAAR2V0ugEAAAAAAADCAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					4,
					"left_delete",
					null,
					"BAAAALoBAAAAAAAAugEAAAAAAAAIAAAAR2V0Rm9jdXO5AQAAAAAAALkBAAAAAAAAAQAAAAq4AQAAAAAAALgBAAAAAAAAAQAAAAm3AQAAAAAAALcBAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAQAAAAAAALoBAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sublime",
				"Preferences: SublimeLinter Settings"
			],
			[
				"cp",
				"Package Control: List Packages"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"C++",
				"Set Syntax: C++"
			],
			[
				"Packa",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Z/Jornada/Development/ProjectWinCE"
	],
	"file_history":
	[
		"/Z/Jornada/Development/ProjectWinCE/workspace.code-workspace",
		"/Z/Jornada/Development/ProjectWinCE/include/ctype.h",
		"/Z/Jornada/Development/ProjectWinCE/include/winuser.h",
		"/Z/Jornada/Development/ProjectWinCE/include/wingdi.h",
		"/C/Users/small23/Repos/ProjectWinCE/Notepad2e-master/src/Edit.c",
		"/C/Users/small23/Desktop/Project WinCE/jyolu/jyolu.cpp",
		"/C/Users/small23/Repos/Python/Ekspertnye systemy/Ekspertnye systemy/Domen.txt",
		"/C/Users/small23/Documents/My Games/Skyrim Special Edition/SkyrimPrefs.ini",
		"/W/STM32Repos/StandKemProject/StandKemProject.ioc",
		"/C/Users/small23/Desktop/Project WinCE/jyolu/jyolu.h",
		"/C/Users/small23/AppData/Roaming/Sublime Text 3/Packages/All Autocomplete/All Autocomplete.sublime-settings",
		"/C/Users/small23/Desktop/Project WinCE/jyolu/include/commctrl.h",
		"/C/Users/small23/Desktop/Project WinCE/jyolu/include/WTYPES.H"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "Z:\\Jornada\\Development\\ProjectWinCE"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "DebugFunctions.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3005,
						"regions":
						{
						},
						"selection":
						[
							[
								2661,
								2661
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ProjectWinCE.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10516,
						"regions":
						{
						},
						"selection":
						[
							[
								3548,
								3548
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1807.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 338,
						"regions":
						{
						},
						"selection":
						[
							[
								338,
								338
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "DebugFunctions.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 313,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "GraphicsFunctions.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5415,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 289.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
